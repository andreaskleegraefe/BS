Aufgabe 2: Threadsynchronisation (10 Punkte)

Theoriefragen (4 Punkte)
	
	1. Erlaeutere den Unterschied zwischen aktivem und passivem Warten.
	#  Aktives Warten (polling) ist ein Vorgang der auf das eintreffen eines 
	   Zustandes wartet, kann permanent nachfragen ob dieser 
	   bereits eingetreten ist.
	#  Passives Warten ist ein Vorgang der ebenfalls auf das 
	   eintreten eines Zustandes wartet, allerdings kann dieser
	   "schlafen" bis er eine Nachricht erhaelt.
	#  Somit liegt der Unterschied darin das beim aktivem Warten 
	   stetig gefragt wird ob der Zustand bereits eingetroffen ist.
	   Im Gegensatz hierzu schlaeft der Prozess beim passivem 
	   Warten, bis er benachtichtigt wird, wodurch dieser weniger 
	   Aufwand verursacht.

	2. Was ist der Konvoi-Effekt? Bei welchen CPU-Zuteilungsstrategien
	   kann dieser auftreten? Nennt ein Beispiel und erlaeutert warum 
	   bei der von euch angegebenen Strategie der Konvoi-Effekt auftritt.
	#  Der Konvoi-Effekt tritt auf wenn viele Threads nacheinander vom 
	   Prozessor verarbeitet werden und die Eigenschaft mehrere Threads
	   gleichzeitig abzuarbeiten nicht genutzt wird wodurch die CPU 
	   stark beansprucht, allerdings das Gesamtesystem nur gering
	   beansprucht wird.
	#  Wuerde man nun die First-Come First-Served (FCFS) waehlen, wuerde
	   dies, bezueglich Ressourcen, wie E/A (Ein-/Ausgabe) welche lange 
	   brauchen um angefordert zu werden, viel Potenzial verschwenden.
	#  Wuerde man nun also z.B. zuerst einen Thread mit langen CPU-Stoss
	   waehlen und darauf viele Threads mit vielen E/A-Stoessen waehlen,
	   so wuerde hier bei einer FCFS-Strategie der Konvoi-Effekt
           auftreten, da die Threads mit vielen E/A Stoessen auf die
	   bearbeitung des Threads mit langen CPU-Stoessen warten muessen.

	3. Folgende Prozesse erreichen die CPU-Warteschlange in dieser 
	   Reihenfolge: A mit Bedienzeit 10ms, B mit Bedienzeit 11ms,
	   C mit Bedienzeit 1ms, D mit Bedienzeit 7ms und E mit Bedienzeit
	   3ms. Der Prozesswechsel dauert genau 0ms und ist somit 
	   zu vernachlaessigen. Es gibt keine I/O-Bursts. Berechnet das
	   Round-Robin-Scheduling. Die Zeitscheibe betraegt t(quantum)=4ms.
	   Gebt dazu den Startzeitpunkt sowie die Durchlaufzeit der Prozesse an.
	#  A=10ms B=11ms C=1ms D=7ms E=3ms quant=4ms
	# ______________________________________
	  | A | B |C| D | E | A | B | D | A| B |
	  0   4   8 9  13  16  20  24  27 29  32
	
	#  Start A=0ms, Ziel A=29ms
	   Start B=4ms, Ziel B=32ms
	   Start C=8ms, Ziel C=9ms
	   Start D=9ms, Ziel D=27ms
	   Start E=13ms, Ziel E=16ms

Programmierung: Filmclub (6 Punkte)

Problem:Ein Konto soll zur Verwaltung von Guthaben erstellt werden.
Es soll einen Gesamtbetrag speichern und es soll moeglich sein
auf diesen Betraege zu addieren (einzahlen) bzw. zu subtrahieren (auszahlen)
um somit den Kontostand zu ueberwachen.

Eingabe:Film -200$, Getraenke -400$, Speisen -400$, Einzahlung +2000$, Start +1000$. 

Ausgabe:Endkontostand nachdem alle Funktionen abgearbeitet wurden

Einfacher Ansatz fuer den Algorithmus:
Es muss eine Variable angelegt werden welche das gesamte Guthaben speichert,
ausserdem muessen 2 Fkt. angelegt werden welche das ein- und auszahlen 
ermoeglichen.

filmclub_a.c

main()	

	


